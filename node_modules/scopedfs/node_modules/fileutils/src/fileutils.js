/**
 * Changes:
 * > Made eachFileOrDirectory consistent with fs.readdir in that
 * the folder to traverse is not returned.
 * > Added option not to recurse folder.
 * > JSLint refactoring (lenient: vars allowed and some issues ignored).
 *
 * @modified DS
 **/

//JSLint static code analysis options:
/*jslint node: true, vars:true, plusplus:true, sloppy: true, stupid: true, white: true, maxerr: 10, indent: 4 */

var fs = require("fs"),
    pathSep = require('path').sep; //SD: use proper path separator

/**
 * Call fileHandler with the file name and file Stat for each file found inside
 * of the provided directory.
 *
 * Call the optionally provided completeHandler with an array of files (mingled
 * with directories) and an array of Stat objects (one for each of the found
 * files.
 *
 * Following is an example of a simple usage:
 *
 *   eachFileOrDirectory('test/', true, function(err, file, stat) {
 *     if (err) throw err;
 *     if (!stat.isDirectory()) {
 *       console.log(">> Found file: " + file);
 *     }
 *   });
 *
 * Following is an example that waits for all files and directories to be
 * scanned and then uses the entire result to do somthing:
 *
 *   eachFileOrDirectory('test/', true, null, function(err, files, stats) {
 *     if (err) throw err;
 *     var len = files.length;
 *     for (var i = 0; i < len; i++) {
 *       if (!stats[i].isDirectory()) {
 *         console.log(">> Found file: " + files[i]);
 *       }
 *     }
 *   });
 */

function dummy() {} //SD: stub

/**
 * Asynchronously traverse the file system calling the provided
 * callback for each file or directory found.
 * Recursion is optional.
 *
 * @param directory (String) folder to traverse.
 * @param recurse (boolean; default: false) whether to recurse.
 * @param fileHandler (function) callback to trigger for each item found.
 *        Callback will receive err, file, stat.
 * @param completeHandler (function) callback to trigger when traversal is complete.
 *        Callback will receive err, files, stats.
 **/
var eachFileOrDirectory = function(directory, recurse, fileHandler, completeHandler) {
  var filesToCheck = 0;
  var checkedFiles = [];
  var checkedStats = [];

  //SD: use stub for callback if not exist, to prevent crash!
  fileHandler = fileHandler || dummy;
  completeHandler = completeHandler || dummy;
  recurse = !!recurse;

  directory = directory || './';

  var fullFilePath = function(dir, file) {
    return dir.replace(/\/$/, '') + pathSep + file;
  };

  var checkComplete = function() {
    if ((filesToCheck === 0) && completeHandler) {
      completeHandler(null, checkedFiles, checkedStats);
    }
  };

  var onFileOrDirectory = function(fileOrDirectory, is1stFile) {
    filesToCheck++;
    fs.stat(fileOrDirectory, function(err, stat) {
      filesToCheck--;
      //SD: don't abort completely without informing completeHandler!
      //if (err) return fileHandler(err);
      if (err)
      {
          if (!is1stFile)
          {
              fileHandler(err);
          }
      }
      else
      {
          if (!is1stFile)
          {
              checkedFiles.push(fileOrDirectory);
              checkedStats.push(stat);
              fileHandler(null, fileOrDirectory, stat);
          }
          if (is1stFile || (recurse && stat.isDirectory()))
          {
              onDirectory(fileOrDirectory);
          }
      }
      checkComplete();
    });
  };

  var onDirectory = function(dir) {
    filesToCheck++;
    fs.readdir(dir, function(err, files) {
      filesToCheck--;
      if (err)
      {
          return fileHandler(err);
      }
      files.forEach(function(file) {
        file = fullFilePath(dir, file);
        onFileOrDirectory(file);
      });
      checkComplete();
    });
  };

  onFileOrDirectory(directory, true);
};

/**
 * Recursivly, asynchronously traverse the file system calling the provided
 * callback for each file (non-directory) found.
 *
 * Traversal will begin on the provided path.
 */
var eachFile = function(path, recurse, callback, completeHandler) {
  var files = [];
  var stats = [];

  //SD: use stub for callback if not exist, to prevent crash!
  callback = callback || dummy;
  completeHandler = completeHandler || dummy;

  eachFileOrDirectory(path, recurse, function(err, file, stat) {
    if (err)
    {
        return callback(err);
    }
    if (!stat.isDirectory()) {
      files.push(file);
      stats.push(stat);
      if (callback)
      {
          callback(null, file, stat);
      }
    }
  }, function(err) {
    if (err)
    {
        return completeHandler(err);
    }
    if (completeHandler)
    {
        completeHandler(null, files, stats);
    }
  });
};

/**
 * Similar to eachFile but for directory.
 */
var eachDirectory = function(path, recurse, callback, completeHandler) {
  var files = [];
  var stats = [];

  //SD: use stub for callback if not exist, to prevent crash!
  callback = callback || dummy;
  completeHandler = completeHandler || dummy;

  eachFileOrDirectory(path, recurse, function(err, file, stat) {
    if (err)
    {
        return callback(err);
    }
    if (stat.isDirectory()) {
      files.push(file);
      stats.push(stat);
      if (callback)
      {
          callback(null, file, stat);
      }
    }
  }, function(err) {
    if (err)
    {
        return completeHandler(err);
    }
    if (completeHandler)
    {
        completeHandler(null, files, stats);
    }
  });
};

/**
 * Works just like eachFile, but it only includes files that match a provided
 * regular expression.
 *
 *   eachFileMatching(/_test.js/, 'test', function(err, file, stat) {
 *     if (err) throw err;
 *     console.log(">> Found file: " + file);
 *   });
 *
 */
var eachFileMatching = function(expression, path, recurse, callback, completeHandler) {
  var files = [];
  var stats = [];

  //SD: use stub for callback if not exist, to prevent crash!
  callback = callback || dummy;
  completeHandler = completeHandler || dummy;

  eachFile(path, recurse, function(err, file, stat) {
    if (err)
    {
        return callback(err);
    }
    if (expression.test(file)) {
      files.push(file);
      stats.push(stat);
      if (callback)
      {
          callback(null, file, stat);
      }
    }
  }, function(err) {
    if (err)
    {
        return completeHandler(err);
    }
    completeHandler(null, files, stats);
  });
};

/**
 * Read each file with a file name that matches the provided expression
 * and was found in the provided path.
 *
 * Calls the optionally provided callback for each file found.
 *
 * Calls the optionally provided completeHandler when the search is
 * complete.
 *
 *   readEachFileMatching(/_test.js/, 'test', function(err, file, stat, content) {
 *     if (err) throw err;
 *     console.log(">> Found file: " + file + " with: " + content.length + " chars");
 *   });
 */
var readEachFileMatching = function(expression, recurse, path, callback, completeHandler) {
  var files = [];
  var contents = [];
  var stats = [];

  //SD: use stub for callback if not exist, to prevent crash!
  callback = callback || dummy;
  completeHandler = completeHandler || dummy;

  eachFileMatching(expression, recurse, path, function(err, file, stat) {
      if (err)
      {
          return callback(err); //SD: abort upon error
      }
    fs.readFile(file, function(err, content) {
      if (err)
      {
          return callback(err);
      }
      files.push(file);
      contents.push(content);
      stats.push(stat);
      if (callback)
      {
          callback(null, file, stat, content);
      }
    });
  }, function(err) {
    if (err)
    {
        return completeHandler(err);
    }
    if (completeHandler)
    {
        completeHandler(err, files, stats, contents);
    }
  });

};

exports.eachFile = eachFile;
exports.eachDirectory = eachDirectory;
exports.eachFileMatching = eachFileMatching;
exports.eachFileOrDirectory = eachFileOrDirectory;
exports.readEachFileMatching = readEachFileMatching;


